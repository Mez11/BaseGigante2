/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Mon Apr 11 17:55:11 CDT 2016
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package mx.ipn.web.dao.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;

import java.util.List;
import java.util.ArrayList;
import mx.ipn.web.dao.*;
import mx.ipn.web.dao.dao.EscuelaDAO;

/**
 * This class provides methods to populate DB Table of Escuela
 */
public class EscuelaDAOImpl implements EscuelaDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Escuela ("
        + "idEscuela, nombre"
        + ") VALUES (?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idEscuela, nombre "
        + "FROM Escuela WHERE "
        + "idEscuela = ?";
    /*Metodo para selecionar todo*/
    
    private static final String SQL_SELECT_ALL =
    		"SELECT "
    		+"idEscuela , nombre "
    		+"FROM Escuela";
    		
    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Escuela SET "
        + "nombre = ? "
        + "WHERE "
        + "idEscuela = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Escuela WHERE "
        + "idEscuela = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Escuela bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdescuela());
            ps.setString(2, bean.getNombre());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Escuela load(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Escuela) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
    /*Para la seleccion de todo*/
    public List<Escuela> loadAll (Connection conn) throws SQLException{
    	PreparedStatement ps = null;
    	ResultSet rs = null;
    	try{
    	 ps = conn.prepareStatement(SQL_SELECT_ALL);
    	 rs = ps.executeQuery();
    	 List<Escuela> results = getResults(rs);
    	 return results;
    	}finally{
    		close(ps);
    		close(rs);
    	}
    	
    	
    }
    
  /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Escuela bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombre());
            ps.setInt(2, bean.getIdescuela());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Escuela> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Escuela>();
        while (rs.next()) {
            Escuela bean = new Escuela();
            bean.setIdescuela(rs.getInt("idEscuela"));
            bean.setNombre(rs.getString("nombre"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }

	
	
}