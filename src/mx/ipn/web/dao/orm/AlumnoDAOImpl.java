/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Mon Apr 11 17:55:11 CDT 2016
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package mx.ipn.web.dao.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;

import mx.ipn.web.dao.Alumno;
import mx.ipn.web.dao.Carrera;

import mx.ipn.web.dao.dao.AlumnoDAO;


/**
 * This class provides methods to populate DB Table of Alumno
 */
public class AlumnoDAOImpl implements AlumnoDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Alumno ("
        + "idAlumno, boleta, nombre, apellidoMaterno, apellidoPaterno, email, foto, "
        + "idCarrera"
        + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "alumno.idAlumno, alumno.boleta, alumno.nombre, alumno.apellidoMaterno, alumno.apellidoPaterno, "
        + "alumno.email, alumno.foto, carrera.idCarrera, carrera.nombre, carrera.duracion, carrera.idEscuela"
        + " FROM Alumno AS alumno "
        + "INNER JOIN Carrera AS carrera "
        + "ON carrera.idCarrera = alumno.idCarrera "
        + "WHERE "
        + "idAlumno = ?";
    
    private static final String SQL_SELECT_ALL =
            "SELECT "
            + "alumno.idAlumno, alumno.boleta, alumno.nombre, alumno.apellidoMaterno, alumno.apellidoPaterno, "
            + "alumno.email, alumno.foto, carrera.idCarrera, carrera.nombre, carrera.duracion, carrera.idEscuela"
            + " FROM Alumno AS alumno "
            + "INNER JOIN Carrera AS carrera "
            + "ON carrera.idCarrera = alumno.idCarrera ";

    /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Alumno SET "
        + "boleta = ?, nombre = ?, apellidoMaterno = ?, apellidoPaterno = ?, email = ?, foto = ?, idCarrera = ? "
        + "WHERE "
        + "idAlumno = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Alumno WHERE "
        + "idAlumno = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Alumno bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdalumno());
            ps.setString(2, bean.getBoleta());
            ps.setString(3, bean.getNombre());
            ps.setString(4, bean.getApellidomaterno());
            ps.setString(5, bean.getApellidopaterno());
            ps.setString(6, bean.getEmail());
            if (bean.getFoto() != null)
                ps.setObject(7, bean.getFoto());
            else
                ps.setNull(7, Types.BLOB);
            ps.setInt(8, bean.getCarrera( ).getIdcarrera( ) );
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Alumno load(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key );
            rs = ps.executeQuery();
            List<Alumno> results = getResults(rs);
            if (results.size() > 0)
                return (Alumno) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
    //Se debe agregar loadAll para realizar consultas de todos
    public List<Alumno> loadAll( Connection conn ) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT_ALL);
            rs = ps.executeQuery();
            List<Alumno> results = getResults(rs);
            return results;
        }finally {
            close(rs);
            close(ps);
        }
    }

    /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Alumno bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getBoleta());
            ps.setString(2, bean.getNombre());
            ps.setString(3, bean.getApellidomaterno());
            ps.setString(4, bean.getApellidopaterno());
            ps.setString(5, bean.getEmail());
            if (bean.getFoto() != null)
                ps.setObject(6, bean.getFoto());
            else
                ps.setNull(6, Types.BLOB);
            ps.setInt(7, bean.getCarrera( ).getIdcarrera( ) );
            ps.setInt(8, bean.getIdalumno());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key );
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Alumno> getResults(ResultSet rs) throws SQLException {
        List<Alumno> results = new ArrayList<Alumno>();
        while (rs.next()) {
            Alumno bean = new Alumno();
            Carrera carrera = new Carrera( );
            //Escuela escuela = new Escuela( );
            
            bean.setIdalumno(rs.getInt("alumno.idAlumno"));
            bean.setBoleta(rs.getString("alumno.boleta"));
            bean.setNombre(rs.getString("alumno.nombre"));
            bean.setApellidomaterno(rs.getString("alumno.apellidoMaterno"));
            bean.setApellidopaterno(rs.getString("alumno.apellidoPaterno"));
            bean.setEmail(rs.getString("alumno.email"));
            bean.setFoto( rs.getBlob( "alumno.foto" ) );
            //bean.setFoto( rs.getObject("alumno.foto", java.sql.Blob.class) );
            
            carrera.setIdcarrera( rs.getInt( "carrera.idCarrera" ) );
            carrera.setNombre( rs.getString( "carrera.nombre" ) );
            carrera.setDuracion( rs.getString( "carrera.duracion" ) );
            
            //escuela.setIdescuela( rs.getInt( "carrera.idEscuela" ) );
            //...
            //escuela.setNombre( rs.getString( "..." ) ); //Tener inner join y llenas con esos campos esta parte
            //carrera.setEscuela( escuela );
            carrera.setIdescuela( rs.getInt( "carrera.idEscuela" ) );

            bean.setCarrera( carrera );
            
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }
}