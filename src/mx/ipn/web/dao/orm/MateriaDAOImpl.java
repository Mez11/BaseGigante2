/*
 * This java source file is generated by DAO4J v1.19
 * Generated on Mon Apr 11 17:55:12 CDT 2016
 * For more information, please contact b-i-d@163.com
 * Please check http://sourceforge.net/projects/dao4j/ for the latest version.
 */

package mx.ipn.web.dao.orm;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;
import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import mx.ipn.web.dao.*;
import mx.ipn.web.dao.dao.MateriaDAO;

/**
 * This class provides methods to populate DB Table of Materia
 */
public class MateriaDAOImpl implements MateriaDAO {
    /* SQL to insert data */
    private static final String SQL_INSERT =
        "INSERT INTO Materia ("
        + "idMateria, nombre, idAlumno"
        + ") VALUES (?, ?, ?)";

    /* SQL to select data */
    private static final String SQL_SELECT =
        "SELECT "
        + "idMateria, nombre, idAlumno "
        + "FROM Materia WHERE "
        + "idMateria = ?";
/*SQL para selecionar todo*/
    private static final String SQL_SELECT_ALL=
    		"SELECT "
    		+" idMateria,nombre,idAlumno "
    		+"FROM Materia";
    
   /* SQL to update data */
    private static final String SQL_UPDATE =
        "UPDATE Materia SET "
        + "nombre = ?, idAlumno = ? "
        + "WHERE "
        + "idMateria = ?";

    /* SQL to delete data */
    private static final String SQL_DELETE =
        "DELETE FROM Materia WHERE "
        + "idMateria = ?";

    /**
     * Create a new record in Database.
     * @param bean   The Object to be inserted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void create(Materia bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_INSERT);
            ps.setInt(1, bean.getIdmateria());
            ps.setString(2, bean.getNombre());
            ps.setInt(3, bean.getIdalumno());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Retrive a record from Database.
     * @param beanKey   The PK Object to be retrived.
     * @param conn      JDBC Connection.
     * @exception       SQLException if something is wrong.
     */
    public Materia load(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            ps = conn.prepareStatement(SQL_SELECT);
            ps.setInt(1, key);
            rs = ps.executeQuery();
            List results = getResults(rs);
            if (results.size() > 0)
                return (Materia) results.get(0);
            else
                return null;
        }finally {
            close(rs);
            close(ps);
        }
    }
/*Metodo loadAll*/
    public List<Materia> loadAll(Connection conn)throws SQLException{
    	PreparedStatement ps = null;
    	ResultSet rs = null;
    	try{
    		ps = conn.prepareStatement(SQL_SELECT_ALL);
    		rs = ps.executeQuery();
    		List<Materia> results = getResults(rs);
    		return results;
    	}finally{
    		close(ps);
    		close(rs);
    	}
    	
    	
    }
    
     /**
     * Update a record in Database.
     * @param bean   The Object to be saved.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void update(Materia bean, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_UPDATE);
            ps.setString(1, bean.getNombre());
            ps.setInt(2, bean.getIdalumno());
            ps.setInt(3, bean.getIdmateria());
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }

    /**
     * Create a new record in Database.
     * @param bean   The PK Object to be deleted.
     * @param conn   JDBC Connection.
     * @exception    SQLException if something is wrong.
     */
    public void delete(int key, Connection conn) throws SQLException {
        PreparedStatement ps = null;
        try {
            ps = conn.prepareStatement(SQL_DELETE);
            ps.setInt(1, key);
            ps.executeUpdate();
        }finally {
            close(ps);
        }
    }
    
    /**
     * Populate the ResultSet.
     * @param rs     The ResultSet.
     * @return       The Object to retrieve from DB.
     * @exception    SQLException if something is wrong.
     */
    protected List<Materia> getResults(ResultSet rs) throws SQLException {
        List results = new ArrayList<Materia>();
        while (rs.next()) {
            Materia bean = new Materia();
            bean.setIdmateria(rs.getInt("idMateria"));
            bean.setNombre(rs.getString("nombre"));
            bean.setIdalumno(rs.getInt("idAlumno"));
            results.add(bean);
        }
        return results;
    }

    /**
     * Close JDBC Statement.
     * @param stmt  Statement to be closed.
     */
    protected void close(Statement stmt) {
        if (stmt != null) {
            try {
                stmt.close();
            }catch(SQLException e){}
        }
    }

    /**
     * Close JDBC ResultSet.
     * @param rs  ResultSet to be closed.
     */
    protected void close(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
            }catch(SQLException e){}
        }
    }

	
}